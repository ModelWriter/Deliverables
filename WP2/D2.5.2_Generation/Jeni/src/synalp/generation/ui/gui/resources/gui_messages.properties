#Eclipse messages class
#Tue Oct 29 13:28:57 CET 2013
GeneratorAboutDialog.close.text=Close
GeneratorAboutDialog.desc.text=<html>Java version of Geni, <br>which was originally developed in Haskell.</html>
GeneratorAboutDialog.name.text=Jeni, 1.0
GeneratorAboutDialog.this.title=About Notes
GeneratorButtonPanel.inspectLexChkBox.toolTipText=Affect Debugger only
GeneratorInfoPanel.label1.text=Grammar
GeneratorInfoPanel.label2.text=\:
GeneratorInfoPanel.label3.text=Lexicon
GeneratorInfoPanel.label4.text=Test Suite
GeneratorInfoPanel.label5.text=MorphoRealizer
GeneratorInfoPanel.label6.text=Ranker
GeneratorInfoPanel.label7.text=Default
GeneratorInfoPanel.titleBorder.text=Last loaded files
GeneratorInputTab.this.title=Input
GeneratorMainFrame.about.text=About
GeneratorMainFrame.aboutAbout.text=About Jeni
GeneratorMainFrame.aboutHelp.text=Help
GeneratorMainFrame.debugButton.text=Debug
GeneratorMainFrame.debugButton.toolTipText=Generate by running each step of the algorithm one by one
GeneratorMainFrame.file.text=File
GeneratorMainFrame.fileExit.text=Exit
GeneratorMainFrame.fileExit.toolTipText=Exit application
GeneratorMainFrame.fileOpt.text=Settings...
GeneratorMainFrame.generateButton.text=Generate
GeneratorMainFrame.generateButton.toolTipText=Generate derivations from the given semantics
GeneratorMainFrame.grammar.text=Import grammar...
GeneratorMainFrame.imp.text=Import
GeneratorMainFrame.inspectLexChkBox.text=Inspect Lex
GeneratorMainFrame.lexicon.text=Import syntactic lexicon...
GeneratorMainFrame.quitButton.text=Quit
GeneratorMainFrame.quitButton.toolTipText=Exit application
GeneratorMainFrame.testSuite.text=Import test suite...
GeneratorMainFrame.this.title=Jeni
GeneratorMainFrame.morphoRealizer.text=Import morphological lexicon...
GeneratorParamPanel.grammarLoadbutton.toolTipText=Load a Grammar file (XML)
GeneratorParamPanel.importResources.title=Resources
GeneratorParamPanel.importResources.tooltip=Import resources as grammar and lexicon from external files or from internal bundle.
GeneratorParamPanel.lexiconLoadbutton.toolTipText=Load a Syntactic Lexicon file (XML)
GeneratorParamPanel.morphoLoadbutton.toolTipText=Load a morphological lexicon file for the MorphoRealizer (.xml or .mph) 
GeneratorParamPanel.other.text=Choose a file to load...
GeneratorParamPanel.rankerLoadbutton.toolTipText=Load a language-model file for the Ranker
GeneratorParamPanel.rdbtnNewRadioButton.text=Import external files
GeneratorParamPanel.rdbtnNewRadioButton_1.text=Import pre-set bundle
GeneratorParamPanel.titleBorder.text=General settings
GeneratorPropertySheetPanel.description=description
GeneratorPropertySheetPanel.description.desc=description
GeneratorPropertySheetPanel.nom=name
GeneratorPropertySheetPanel.nom.desc=entire name
GeneratorPropertySheetPanel.properties=attributes
GeneratorPropertySheetPanel.type=type
GeneratorPropertySheetPanel.type.desc=element's type
GeneratorResultTab.this.title=Log
GeneratorSemPanel.titleBorder.text=Semantics
GeneratorSettingsDialog.headers.name=Option name
GeneratorSettingsDialog.headers.value=Option value
GeneratorSettingsDialog.this.title=Settings
categoryOptions.format=Format support
categoryOptions.format.desc=These options control the new format/old format support, especially for the representation of lemmas.
categoryOptions.general=General purpose options
categoryOptions.general.desc=These options are general.
categoryOptions.internal=Internal settings
categoryOptions.internal.desc=Some of these settings could be also hardcoded. They have been set here such that you could change them if you observe something wrong.
categoryOptions.optimizations=Optimizations
categoryOptions.optimizations.desc=These options are meant to control optimizations.
generatorOptions.allow_duplicates=Allow duplicates
generatorOptions.allow_duplicates.desc=If <code>true</code>, accepts duplicates entries in the chart.
generatorOptions.allow_empty_lemmas=Allow empty lemmas
generatorOptions.allow_empty_lemmas.desc=If <code>true</code>, allows that a lexicon entry does not specify the lemma, the lemma has thus to be informed within the semantics. Setting this option to <code>false</code> makes the lexicon stricter.
generatorOptions.allow_missing_coanchors=Allow missing coanchors
generatorOptions.allow_missing_coanchors.desc=If <code>false</code>, a failing anchoring equation causes the tree to be not selected ; if <code>true</code>, the tree is still selected despite the anchoring failure.
generatorOptions.assign_node_ids=Assign node IDs
generatorOptions.assign_node_ids.desc=If <code>true</code>, makes sure that the nodes of the trees have names following <em>GenI</em> convention.
generatorOptions.case_dependent=Case dependent
generatorOptions.case_dependent.desc=If <code>true</code>, the feature constants are considered case dependent. If <code>false</code>, the case does not matter in unification/subsumption. 
generatorOptions.debug=Debug
generatorOptions.debug.desc=Enables different level of log depending of the state of development (<code>integer</code>) \: <ul><li><em>0</em> to disable,</li><li> <em>1</em> activated,</li><li> <em>2</em> detailed</li></ul>.
generatorOptions.early_semantic_failure=Early semantic failure
generatorOptions.early_semantic_failure.desc=If <code>true</code>, checks for early failure based on the idx.
generatorOptions.early_success=Early success
generatorOptions.early_success.desc=If <code>true</code>, only tries a tree combination once.
generatorOptions.ignore_labels=Ignore labels
generatorOptions.ignore_labels.desc=If <code>true</code>, ignores completely the labels when testing semantics subumption.
generatorOptions.missing_lexem_policy=Missing lexem policy
generatorOptions.missing_lexem_policy.desc=Selects the policy when there are lexems that are not found \: <ul><li> <em>IGNORE\:</em> ignores completely the missing lexem (the morph realization has then a different length than the syntactic one). </li><li> <em>OUTPUT_LEMMA\:</em> outputs a fake lexem whose surface form is the lemma, it actually hides the potential error. </li><li> <em>OUTPUT_MISSING\:</em> outputs a fake lexem <code>&lt;missing\:lemma&gt;</code> that explicitely warns about the missing lexem</li></ul>
generatorOptions.rename_variables=Rename variables
generatorOptions.rename_variables.desc=If <code>true</code>, renames the variables from the grammar such that no variable appears twice. This speeds up a little.
generatorOptions.rewrite_lemanchor=Rewrite lemanchor
generatorOptions.rewrite_lemanchor.desc=If <code>true</code>, rewrites the <code>lemanchor</code> values as lemma 
generatorOptions.rewrite_lex_as_lemma=Rewrite lex as lemma
generatorOptions.rewrite_lex_as_lemma.desc=If <code>true</code>, rewrites the <code>lex</code> features in the lexicon as lemma.
generatorOptions.rewrite_lex_nodes=Rewrite lex nodes
generatorOptions.rewrite_lex_nodes.desc=If <code>true</code>, rewrites the <code>lex</code> nodes in the grammar as lemma (new format support).
generatorOptions.timeout=Timeout
generatorOptions.timeout.desc=The timeout for the generator in milliseconds. Set to <em>0</em> to disable (<code>integer</code>).
generatorOptions.use_bit_semantics=Use bit semantics
generatorOptions.use_bit_semantics.desc=If <code>true</code>, models the semantics as a coverage-based semantics which speeds up the semantic overlap and equality tests.
generatorOptions.use_filtering=Use filtering
generatorOptions.use_filtering.desc=If <code>true</code> uses polarity filtering (<em>not supported yet</em>).
