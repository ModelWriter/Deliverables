
#
# This file associates semantics and syntax. For a given tree, it looks all the most specific traces that are subtraces, and
# joins the semantics of the matched patterns.
# 
# warning: ?A means anchor, ?L lemma, ?S0..?Sn substitutions, ?F foot, ?1..?n have a clash constraint
#

#### VerbalTop

event:
for [event(?A) evttype(?A ?L) mode(?A ?mode) number(?A ?num) tense(?A ?tense) person(?A ?pers)]
	select VerbalTop

### n0V

# "the man sleeps", "who sleeps"
the_man_sleeps:
for [relation(agent ?A ?S0)]
	select active, Subject

# "sleep"
sleep:
for []
	select active, Subject, ProSubject
	select active, Subject, ImperativeSubject
	select active, Subject, NPGerundSubjectPro

# "the man who sleeps"
the_man_who_sleeps:
for [relation(agent ?A ?F) focus(?S0 ?A)]
	select active, Subject, RelativeOvertSubject
	
the_man_that_sleeps:
for [relation(agent ?A ?F)]
	select active, Subject, RelativeCovertSubject

# "the day bill sleeps"	
the_day_bill_sleeps:
for [relation(agent ?A ?S0) relation(?rel ?A ?F)]
	select active, Subject, RelativeAdjunctCovert
	
# "the house in which bill sleeps"
the_house_in_which_bill_sleeps:
for [relation(agent ?A ?S1) relation(?rel ?A ?F) which(?S0)]
	select active, Subject, RelativeAdjunctPied-Piping

# "the sleeping man" (it is not a VerbalTop hence all the features)	
sleeping_man:
for [relation(agent ?A ?F) event(?A) evttype(?A ?L) mode(?A ?mode) number(?A ?num) tense(?A ?tense) person(?A ?pers)]
	select betaVn
	
	
### n0Vn1

## active

the_man_bakes_the_cake:
for [relation(patient ?A ?S1)]
	select active, Object
	
bake_the_cake:
for [relation(patient ?A ?S0)]
	select active, Object, ProSubject
	select active, Object, ImperativeSubject
	select active, Object, NPGerundSubjectPro
	
# "what does the man bake"
what_does_the_man_bake:
for [relation(patient ?A ?S0) relation(agent ?A ?S1)]
	select active, Subject, Object, WhObject

# "the man who bakes the cake"
the_man_who_bakes_the_cake:
for [relation(patient ?A ?S0) relation(agent ?A ?S1) who(?S0)]
	select active, Object, RelativeOvertSubject 	
	
the_man_that_bakes_the_cake:
for [relation(patient ?A ?S0)]
	select active, Object, RelativeCovertSubject 

# "the cake that the man bakes"
the_cake_that_the_man_bakes:
for [relation(patient ?A ?F) relation(agent ?A ?S1) that(?S0)]
	select active, Subject, Object, RelativeOvertObject

# "the cake the man bakes"
the_cake_the_man_bakes:
for [relation(patient ?A ?F)]
	select active, Object, RelativeCovertObject

	
## passive	
	
the_cake_baked_by_the_man:
for [relation(patient ?A ?S0)]
	select passive, Subject	
	
baked:
for []
	select passive, Subject, ProSubject
	select passive, Subject, NPGerundSubjectPro
	
baked_by_the_man:
for [relation(agent ?A ?S1)]
	select passive, ByAgent

PassiveByAgentNoSubject:
for [relation(patient ?A ?S0)]
	select passive, ByAgent, ProSubject
	select passive, ByAgent, NPGerundSubjectPro
	
# "the cake that is baked"
the_cake_that_is_baked:
for [relation(patient ?A ?F) that(?S0)]
	select passive, Subject, RelativeOvertSubject

# "the cake baked"
the_cake_baked:
for [relation(patient ?A ?F)]
	select passive, Subject, RelativeCovertSubject

# "the cake baked by the man"
the_cake_baked_by_the_man:
for [relation(patient ?A ?F) relation(patient ?A ?S0)]
	select passive, Subject, ByAgent, RelativeCovertSubject
	
who_was_the_cake_baked_by:
for [relation(agent ?A ?S0) relation(patient ?A ?S1)]
	select passive, Subject, ByAgent, WhPObject   # "who was the cake baked by"
	select passive, Subject, ByAgent, WhPPIObject # "by who was the cake baked"

# "the man the cake is baked by"
the_man_the_cake_is_baked_by:
for [relation(agent ?A ?F) relation(patient ?A ?S0)]
	select passive, Subject, ByAgent, RelativeCovertByAgent
	
# "the man who the cake is baked by"
the_man_who_the_cake_is_baked_by:
for [relation(agent ?A ?F) relation(patient ?A ?S1) who(?S0)]
	select passive, Subject, ByAgent, RelativeOvertByAgent
	
# "the man by whom the cake is baked"
the_man_by_whom_the_cake_is_baked:
for [relation(agent ?A ?F) relation(patient ?A ?S1) who(?S0)]
	select passive, Subject, ByAgent, RelativePied-Piping



## n0VPn1

# active

the_man_turns_on_the_light:
for [relation(patient ?A ?S1)]
	select active, CanPPCoanchor

turn_on_the_light:
for [relation(patient ?A ?S0)]
	select active, CanPPCoanchor, ProSubject
	select active, CanPPCoanchor, ImperativeSubject
	select active, CanPPCoanchor, NPGerundSubjectPro

# "what does the man turn on"
what_does_the_man_turn_on:
for [relation(patient ?A ?S0) relation(agent ?A ?S1)]
	select active, Subject, CanComplement, WhComplement

# "the man who turns on the light"
the_man_who_turns_on_the_light:
for [relation(patient ?A ?S0) relation(agent ?A ?S1) who(?S0)]
	select active, CanComplement, RelativeOvertSubject 	
	
the_man_that_turns_on_the_light:
for [relation(patient ?A ?S0)]
	select active, CanComplement, CanPPCoanchor, RelativeCovertSubject 

# "the light that the man turns on"
ActiveRelativeOvertComplement:
for [relation(patient ?A ?F) relation(agent ?A ?S1) that(?S0)]
	select active, Subject, CanComplement, RelativeOvertObject

# "the light the man turns on"
the_light_the_man_turns_on:
for [relation(patient ?A ?F)]
	select active, CanComplement, RelativeCovertObject

# "the room in which the man turns on the light"
the_room_in_which_the_man_turns_on_the_light:
for [relation(agent ?A ?S1) relation(patient ?A ?S2) relation(?rel ?A ?F) which(?S0)]
	select active, Subject, CanComplement, RelativeAdjunctPied-Piping
	
# passive	
	
# not sure	
PassiveComplementRelativeAdjunctCovert:
for [relation(agent ?A ?S0) relation(?rel ?A ?F)]
	select passive, Subject, CanComplement, RelativeAdjunctCovert
	
# "the room in which the light is turned on"
the_room_in_which_the_light_is_turned_on:
for [relation(agent ?A ?S1) relation(?rel ?A ?F) which(?S0)]
	select passive, Subject, CanComplement, RelativeAdjunctPied-Piping
	
# "the room in which the light is turned on by the man"
the_room_in_which_the_light_is_turned_on_by_the_man:
for [relation(patient ?A ?S1) relation(agent ?A ?S2) relation(?rel ?A ?F) which(?S0)]
	select passive, Subject, CanComplement, ByAgent, RelativeAdjunctPied-Piping
	
	
## n0Vs1

the_man_expects_to_sleep:
for [relation(patient ?A ?S1)]
	select active, CanComplement, SentComplement
	
ActiveSentComplementFoot:
for [relation(patient ?A ?F)]
	select active, CanComplement, SentComplement, CanSentComplementFoot
	
ActiveSentComplementFootNoSubject:
for [relation(patient ?A ?F)]
	select active, CanComplement, SentComplement, CanSentComplementFoot, ProSubject
	select active, CanComplement, SentComplement, CanSentComplementFoot, ImperativeSubject
	select active, CanComplement, SentComplement, CanSentComplementFoot, NPGerundSubjectPro
	
ActiveSentComplementSubstNoSubject:
for [relation(patient ?A ?S0)]
	select active, CanComplement, SentComplement, CanSentComplementSubst, ProSubject
	select active, CanComplement, SentComplement, CanSentComplementSubst, ImperativeSubject
	select active, CanComplement, SentComplement, CanSentComplementSubst, NPGerundSubjectPro
	
the_man_that_expects_to_sleep:
for [relation(agent ?A ?F) relation(patient ?A ?S0)]
	select active, Subject, CanComplement, SentComplement, RelativeCovertSubject
	
# "what does the man expect"
what_does_the_man_expect:
for [relation(patient ?A ?S0) relation(agent ?A ?S1)]
	select active, Subject, SentComplement, WhSentComplement	
	
# "the thinking that all is lost (is not surprising)"
the_expecting_that_the_man_sleeps:
for [relation(patient ?A ?S1) ref(?S0)]
	select active, Subject, DeterminerGerund, SentComplement
	
# ...


### Others


Reftype:
for [reftype(?F ?type)]
 	select betaDnx

Modifier:
for [modifier(?F ?L)]
	select betaAn
		
ParticipantAnchoring:
for [participant(?A) objtype(?A ?L) number(?A ?num) person(?A ?pers) gender(?A ?gen)]
	select alphaNXN
	
InterrogativePronoun:
for [participant(?A) animacy(?A ?animacy) reftype(?A interrogative) number(?A ?num) person(?A 3) gender(?A ?gen)]
	select alphaInterrogativePronoun
	
Pronoun:
for [participant(?1) reftype(?1 pronoun) person(?1 ?pers) number(?1 ?num) gender(?1 ?gen)]
	select alphaPronoun