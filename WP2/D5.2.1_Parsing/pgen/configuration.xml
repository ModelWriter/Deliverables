<?xml version="1.0" encoding="UTF-8"?>

<!--
	Enables to define configurations: options and resources. The resource or the option tag can be embedded under an option
	tag in order to mark the fact that the resource is associated to an option, but it is for readability only, all resources
	are stored in a flat way. A configuration can inherit another configuration: when there are conflicting options or resources,
	it takes the most specific ones. A configuration may define a base directory from which all the resources are defined (the
	basedir is not inherited). -->

<configurations>

	<!-- the full default configuration for generation, see GeneratorOption to have a description of each option  -->
	<config name="default">
		<option name="generator" value="jeni"/>
		
		<option name="timeout" value="0"/>
		
		<option name="use_filtering" value="false">
			<option name="filtering_categories" value="s"/>
		</option>
		
		<option name="ignore_labels" value="false"/>
		<option name="case_dependent" value="false"/>
		<option name="assign_node_ids" value="true"/>
		<option name="rename_variables" value="true"/>
		<option name="rewrite_lex_nodes" value="true"/>
		<option name="rewrite_lemanchor" value="true"/>
		<option name="allow_duplicates" value="false"/>
		<option name="use_bit_semantics" value="true"/>
		<option name="allow_empty_lemmas" value="true"/>
		<option name="rewrite_lex_as_lemma" value="true"/>
		<option name="early_semantic_failure" value="true"/>
		<option name="selection" value="classical_selection"/>
		<option name="allow_missing_coanchors" value="false"/>
		<option name="morph_lexicon_order" value="lemma_first"/>
		<option name="missing_lexem_policy" value="output_missing"/>
		
		<option name="ranker" value="default_ranker">
			<option name="beam_size" value="2"/>
		</option>
		
	</config>

	
	
	<config name="default_parser" inherit="default"> <!-- Config for doing the semantic parse -->
		<option name="timeout" value="0"/> <!-- This means no timeout -->
		<option name="use_bit_semantics" value="false"/> <!-- Don't know why but otherwise generates an error -->
		<option name="filtering_categories" value="s"/> <!-- We want the root category to be of type S if not otherwise specified (i.e. if use_filtering is not set to false by the subclass inheriting this class ) -->
		<option name="allow_duplicates" value="false"/> <!-- We don't want to store intermediate/final results that have the same exact syntax and semantics -->
	</config>


	
	<config name="parser_airbus_core_options" inherit="default_parser">
		<option name="use_filtering" value="false"/> <!-- For allowing root node of the tree to have any PoS category  -->
		<option name="use_cky_parse" value="true"/>
		<option name="use_probability" value="false"/>
		<!-- The following are options to be implemented in future
		<option name="use_ML_filtering" value="false"/> To prune out trees during parse using the decision of a ML model
		<option name="trained_ML_model_filename" value="someFileName to save the trained model"/>
		<option name="ML_training_resource_filename" value="someFileName to save the file which describes the same examples as those used for training"/>
		 -->
	</config>
	


	<!-- Todo : Place the option of underspecified/fullyspecified lexicon and check for this option in the code to look for and use only that lexicon during parsing. For now, using fake empty file "no_underspecified_lexicon"-->
	<config name="parse_airbus_truelex" inherit="parser_airbus_core_options" basedir="resources/airbus/input">
		<resource name="fslexicon" file="true_fullyspecified_lexicon.lex"/>
		<resource name="grammar" file="valuation.xml"/>
		<resource name="lexicon" file="underspecified_lexicon.lex"/> <!-- Underspecified lexicon -->
		<resource name="morph" file="parser_morph.mph"/>
		<resource name="ontology" file="ontology/component-03072015_changed.rdf"/>
	</config>
	<config name="parse_airbus_excellex" inherit="parser_airbus_core_options" basedir="resources/airbus/input">
		<resource name="fslexicon" file="excelSheet_fullyspecified_lexicon.lex"/>
		<resource name="grammar" file="valuation.xml"/>
		<resource name="lexicon" file="no_underspecified_lexicon.lex"/> <!-- Underspecified lexicon -->
		<resource name="morph" file="parser_morph.mph"/>
		<resource name="ontology" file="ontology/component-03072015_changed.rdf"/>
	</config>
	
	

	<config name="parse_airbus_excellex_true_sentence" inherit="parse_airbus_excellex" basedir="resources/airbus/input">
		<resource name="sentences" file="airbus_sentences.txt"/>
		<resource name="output" file="../output/airbus_parse_output/excellex_true_sentences/ParseResult.txt"/>
	</config>
	<config name="parse_airbus_excellex_colbc_sentence" inherit="parse_airbus_excellex" basedir="resources/airbus/input">
		<resource name="sentences" file="col_bc_only_sentences.txt"/>
		<resource name="output" file="../output/airbus_parse_output/excellex_colbc_sentences/ParseResult.txt"/>
	</config>
	
	

	
	
	<config name="reverse_gen" inherit="default"> <!-- Config for generating from the output of semantic parse -->
		<option name="early_semantic_failure" value="false"/> <!-- to fix cases of where Haskell Geni would generate but Jeni won't -->
		<option name="missing_lexem_policy" value="output_lemma"/> <!-- The morph file for reverse generation is not specified; so we assume that the surface expression is the lemma itself. -->
	</config>	

	<config name="reverse_gen_airbus" inherit="reverse_gen" basedir="resources/airbus/input">
		<option name="use_filtering" value="false"/> <!-- For obtaining partial generation results, root tree can have any node category  -->
		<resource name="grammar" file="valuation.xml"/>
		<resource name="lexicon" file="newLexicon.lex"/>
		<resource name="morph" file="generation_morph.mph"/>
	</config>


</configurations>
