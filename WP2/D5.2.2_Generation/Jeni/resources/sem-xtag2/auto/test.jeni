

# This is a test suite for sem-xtag2 with automatic semantics
# The test sentences for verb families are mostly written according to msc-sb2008.pdf which should be found in resources/sem-xtag2/sources


#########################################################################################
### General purpose #####################################################################

@morph @strict
dog
semantics:[participant(p) objtype(p dog)]
sentence:[dog]

@morph @strict
a-dog
semantics:[participant(p) objtype(p dog) reftype(p indefinite)]
sentence:[a dog]

@morph @strict
a-small-dog
semantics:[participant(p) objtype(p dog) reftype(p indefinite) modifier(p small)]
sentence:[a small dog]

@morph @strict
a-small-black-dog
semantics:[participant(p) objtype(p dog) reftype(p indefinite) modifier(p small) modifier(p black)]
sentence:[a small black dog, a black small dog]



#########################################################################################
### Tense and Agreement #################################################################


# bill speaks (simple present)
@morph @strict
bill-speaks
semantics:[
	event(e) evttype(e speak) tense(e present)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[bill speaks]


# bill is speaking (present progressive)
@morph @loose
bill-is-speaking
semantics:[
	event(e) evttype(e speak) tense(e present-progressive)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[bill is speaking]


# bill spoke (simple past)
@morph @strict
bill-spoke
semantics:[
	event(e) evttype(e speak) tense(e past)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[bill spoke]


# bill was speaking (past progressive)
@morph @loose
bill-was-speaking
semantics:[
	event(e) evttype(e speak) tense(e past-progressive)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[bill was speaking]


# bill has spoken (present perfect simple) 
@morph @strict
bill-has-spoken
semantics:[
	event(e) evttype(e speak) tense(e present-perfect)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[bill has spoken]


# bill has been speaking (present perfect progressive)
@morph @loose
bill-has-been-speaking
semantics:[
	event(e) evttype(e speak) tense(e present-perfect-progressive)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[bill has been speaking]


# bill had spoken (past perfect simple)
@ignore @morph @strict
bill-had-spoken
semantics:[
	event(e) evttype(e speak) tense(e past-perfect)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[bill had spoken]


# bill had been speaking (past perfect progressive)
@ignore @morph @strict
bill-had-been-speaking
semantics:[
	event(e) evttype(e speak) tense(e past-perfect-progressive)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[bill had been speaking]


# bill will speak (future I simple)
@ignore @morph @strict
bill-will-speak
semantics:[
	event(e) evttype(e speak) tense(e future)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[bill will speak]


# bill is going to speak (future I simple going-to)
@ignore @morph @strict
bill-is-going-to-speak
semantics:[
	event(e) evttype(e speak) tense(e future-going-to)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[bill is going to speak]


# bill will be speaking (future I progressive) 
# future-progressive -> main-mode=participle, main-tense=present, aux=be, aux-tense=future 

# bill will have spoken (future II simple)
# future2 -> main-mode=participle, main-tense=past, aux=have, aux-tense=future

# bill will have been speaking (future II progressive)
# future2-progressive -> main-mode=participle, main-tense=present, aux=be, aux-tense=???

# bill would speak (conditional I simple)
# conditional -> main-mode=base, aux=would

# bill would be speaking (conditional I progressive) 
# conditional-progressive -> main-mode=participle, main-tense=present, aux=be, aux-tense=conditional

# bill would have spoken (conditional II simple) 
# conditional2 -> main-mode=participle, main-tense=past, aux=have, aux-tense=conditional

# bill would have been speaking (conditional II progressive) 
# conditional2-progressive -> main-mode=participle, main-tense=present,



#########################################################################################
### n0V #################################################################################

### n0V - Declarative ################################
# bill sleeps, a man sleeps, the man sleeps, he sleeps

# given the semantic rules it is the default mode (indicative)
@morph @strict
bill-sleeps
semantics:[
	event(e) evttype(e sleep)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[bill sleeps]


# literals arguments can be disjunctions: mode(e ind|ger) returns both modes
# we need to discuss what to do with "bill sleeping", do we enable the auxiliary? do we force it?
@morph @strict
sleeping-bill
semantics:[
	event(e) evttype(e sleep) mode(e gerund)
	participant(p) objtype(p bill)
	relation(agent e p)]
sentence:[sleeping bill, bill sleeping]


@morph @strict
a-man-sleeps
semantics:[
	event(e) evttype(e sleep)
	participant(p) objtype(p man) reftype(p indefinite)
	relation(agent e p)]
sentence:[a man sleeps]


# "he sleeping" sounds a bit weird, probably missing auxiliary
@ignore @morph @strict
he-sleeping
semantics:[
	event(e) evttype(e sleep) mode(e gerund)
	participant(p) reftype(p pronoun)
	relation(agent e p)]
sentence:[he sleeping, his sleeping]


### n0V - Wh-moved subject ################################
# who sleeps? what sleeps?

@morph @strict
who-sleeps
semantics:[
	event(e) evttype(e sleep)
	participant(p) reftype(p interrogative) animacy(p true|false)
	relation(agent e p)]
sentence:[who sleeps, what sleeps]


# TODO: which man sleeps ? 


### n0V - Subject relative clause with overt extracted wh-NP ###
# the man who sleeps, the man whose wife sleeps

# how to choose the order? an index?
# use labels!! to have the group "the man who sleeps" they must have the same label 
@morph @strict
the-man-who-sleeps-snores
semantics:[
	event(e1) evttype(e1 sleep)
	event(e2) evttype(e2 snore)
	participant(p) objtype(p man) reftype(p definite)
	relation(agent e1 p) relation(agent e2 p)]
sentence:[the man who sleeps snores, the man who snores sleeps, the man who sleeps who snores, the man who snores who sleeps]


# it produces too many! we could probably rule some of them out
# warning: "the man sleeps who snores" comes from problematic co-indexed mode in the tree of sleep
# there are more that are produced because of change in DerivationNode
@ignore @morph @loose
the-man-who-sleeps-snores
semantics:[
	event(e1) evttype(e1 sleep) mode(e1 indicative|gerund)
	event(e2) evttype(e2 snore) mode(e2 indicative|gerund)
	participant(p) objtype(p man) reftype(p definite)
	relation(agent e1 p) relation(agent e2 p)]
sentence:[
	 the man sleeping who snores, 
	 the man sleeping who snoring, 
	 the man sleeps who snores,
	 the man sleeps who snoring,
	 the man snores who sleeping,
	 the man snores who sleeps,
	 the man snoring who sleeping,
	 the man snoring who sleeps,
	 the man who sleeping snores,
	 the man who sleeping snoring,
	 the man who sleeps snores,
	 the man who sleeps snoring,
	 the man who snores sleeping,
	 the man who snores sleeps,
	 the man who snoring sleeping,
	 the man who snoring sleeps,
	 the sleeping man snores,
	 the sleeping man snoring,
	 the sleeping man who snores,
	 the sleeping man who snoring,
	 the sleeping snoring man,
	 the snoring man sleeping,
	 the snoring man sleeps,
	 the snoring man who sleeping,
	 the snoring man who sleeps,
	 the snoring sleeping man]


# To pass the exact following test we will need to implement "selectional" literals that are literals
# whose purpose is to help filtering trees without being part of the semantics of the
# generated sentence. For instance: event(e) relation(propContent e p). Another possibility
# is to use labels to constraint the scope hence determining wether the literals are to
# be considered as modifiers or events
@ignore @morph @strict
the-man-who-sleep
semantics:[
	event(e) evttype(e sleep)
	participant(p) objtype(p man) reftype(p definite)
	relation(agent e p)]
sentence:[the man who sleeps]


### n0V - Subject relative clause with covert extracted wh-NP ################################
# the man that sleeps, the man to sleep


### n0V - Imperative ################################
# Sleep!

@morph @strict
sleep
semantics:[event(e1) evttype(e1 sleep) mode(e1 imperative)]
sentence:[sleep]


### n0V - Determiner Gerund ################################
# Bill disapproves of [her dancing]

# co-anchor test, seems slightly erroneous: missing "is"
# to be fixed
@morph @loose
bill-disapproves-of-her
semantics:[
	event(e) evttype(e disapprove)
	participant(p0) objtype(p0 bill)
	participant(p1) reftype(p1 pronoun)
	relation(agent e p0) relation(patient e p1)]
sentence:[bill disapproves of he]


# with the np-gerund it produces all "his dance" ("his dancing") and "he dance" ("him dancing")
# others are also produced: like "disapproving of bill he dances", not sure if it is correct
# veeery slow
@ignore @morph @loose
bill-disapproves-of-her-dancing
semantics:[
	event(e0) evttype(e0 disapprove) mode(e0 ind|gerund|ppart)
	event(e1) evttype(e1 dance) mode(e1 gerund)
	participant(p0) objtype(p0 bill)
	participant(p1) reftype(p1 pronoun)
	relation(agent e0 p0) relation(patient e0 e1) relation(agent e1 p1)]
sentence:[bill disapproves of he dancing, bill disapproves of his dancing, 
		  his dancing disapproved of by bill, he dancing disapproved of by bill]


### n0V - NP Gerund ################################
# Bill disapproved of [the cat dancing] (changed from "me dancing")

# to do
@ignore @strict
bill-disapproves-of-the-cat-dancing
semantics:[
	event(e0) evttype(e0 disapprove)
	event(e1) evttype(e1 dance) mode(e1 gerund)
	participant(p0) objtype(p0 bill)
	participant(p1) objtype(p1 cat) reftype(cat definite)
	relation(agent e0 p0) relation(patient e0 e1) relation(agent e1 p1)]
sentence:[bill disapprove of the cat dance, the cat dance disapprove of by bill]


### n0V - PRO subject ################################
# Bill wants [PRO to sleep]

# Try to do the "to" with betaVvx + constrain the "want" argument
# note: it produces errors
# the semantics has been modeled by reifying both events since we may have modifiers on both
# compare: "bill deeply wants to sleep" and "bill wants to sleep deeply"
# check: there is not forced adjunction of "to" on the infinitive
@morph @strict
bill-wants-to-sleep
semantics:[
	event(e0) evttype(e0 want) mode(e0 indicative|gerund)
	event(e1) evttype(e1 sleep) mode(e1 infinitive)
	participant(p) objtype(p bill)
	relation(agent e0 p) relation(patient e0 e1)]
sentence:[bill wants to sleep, bill wanting to sleep, bill wants sleep, bill wanting sleep]


# add: "bill wants the man to sleep" (avec un evt de sleeping dont l'agent est "the man")
# "the man that sleep"....


### n0V - NP gerund with PRO subject ################################
# [PRO dancing] fascinates Lisa.

@morph @strict
dancing-fascinates-lisa
semantics:[
	event(e0) evttype(e0 dance) mode(e0 gerund)
	event(e1) evttype(e1 fascinate)
	participant(p) objtype(p lisa)
	relation(agent e1 e0) relation(patient e1 p)]
sentence:[dancing fascinates lisa]


### n0V - Adjunct (gap-less) relative clause with PP pied-piping ################################
# the house in which Bill sleeps

@morph @strict
the-house-in-which-bill-sleeps
semantics:[
	event(e) evttype(e sleep)
	participant(p0) objtype(p0 bill)
	participant(p1) objtype(p1 house) reftype(p1 definite)
	relation(agent e p0) relation(in e p1)]
sentence:[the house in which bill sleeps, bill sleeps in the house]


### n0V - Adjunct (gap-less) relative clause with covert extracted wh-NP ################################
# the day Bill sleeps

@morph @strict
the-day-bill-sleeps
semantics:[
	event(e) evttype(e sleep)
	participant(p0) objtype(p0 bill)
	participant(p1) objtype(p1 day) reftype(p1 definite)
	relation(agent e p0) relation(time e p1)]
sentence:[the day bill sleeps]



### n0V - Pre-nominal participial modifier ################################
# the sleeping man

@morph @strict
the-sleeping-man
semantics:[
	event(e) evttype(E sleep) mode(e gerund)
	participant(p) objtype(p man) reftype(p definite)
	relation(agent e p)]
sentence:[the sleeping man, the man sleeping]



#########################################################################################
### En1v ################################################################################

### En1v - Declarative ###
# the snow melts

### En1v - Wh-moved subject ###
# what melted

### ...



#########################################################################################
### n0Vn1 ###############################################################################

### n0Vn1 - Declarative
# Bill baked a cake, Bill loves Lisa
@morph @strict
bill-baked-a-cake
semantics:[
	event(e) evttype(e bake) tense(e past)
	participant(p0) objtype(p0 bill)
	participant(p1) objtype(p1 cake) reftype(p1 indefinite)
	relation(agent e p0) relation(patient e p1)]
sentence:[bill baked a cake, a cake baked by bill]


### n0Vn1 - Wh-moved object
# what did Bill bake
# who does Bill like

# to solve that: have two tenses one or the main verb one for the aux, 
# this is handled internally by rewriting
@morph @strict
what-did-bill-bake
semantics:[
	event(e) evttype(e bake) tense(e past)
	participant(p0) objtype(p0 bill)
	participant(p1) reftype(p1 interrogative) animacy(p1 false)
	relation(agent e p0) relation(patient e p1)]
sentence:[what did bill bake]

@morph @strict
who-does-bill-like
semantics:[
	event(e) evttype(e like) tense(e present)
	participant(p0) objtype(p0 bill)
	participant(p1) reftype(p1 interrogative) animacy(p1 true)
	relation(agent e p0) relation(patient e p1)]
sentence:[who does bill like]


### n0Vn1 - Wh-moved subject
# who baked a cake

@morph @strict
who-baked-a-cake
semantics:[
	event(e) evttype(e bake) tense(e past)
	participant(p0) reftype(p0 interrogative) animacy(p0 true)
	participant(p1) objtype(p1 cake) reftype(p1 indefinite)
	relation(agent e p0) relation(patient e p1)]
sentence:[who baked a cake]


### n0Vn1 - Imperative
# bake the cake

@morph @strict
bake-the-cake
semantics:[
	event(e) evttype(e bake) mode(e imperative)
	participant(p1) objtype(p1 cake) reftype(p1 definite)
	relation(patient e p1)]
sentence:[bake the cake]


### n0Vn1 - Passive with by-phrase
# a cake is baked by Bill
# * a cake is bake by Bill

# notice it's loose, it's because n0Vn1 trees with ppart are anchored
@morph @loose
a-cake-is-baked-by-bill
semantics:[
	event(e) evttype(e bake) mode(e ppart)
	participant(p0) objtype(p0 bill)
	participant(p1) objtype(p1 cake) reftype(p1 indefinite)
	relation(agent e p0) relation(patient e p1)]
sentence:[a cake is baked by bill, a cake baked by bill]


### n0Vn1 - Passive without by-phrase
# a cake was baked

# "a cake baked" not awesome, force the adjunction
# it's a bit tricky, because "a cake baked by bill" needs to be allowed
@morph @strict
a-cake-was-baked
semantics:[
	event(e) evttype(e bake) tense(e past) mode(e ppart)
	participant(p1) objtype(p1 cake) reftype(p1 indefinite)
	relation(patient e p1)]
sentence:[a cake was baked, a cake baked]



### n0Vn1 - Passive with wh-moved subject and by-phrase
# what was baked by Bill

# "what baked by bill" not awesome, force the adjunction
@morph @strict
what-was-baked-by-bill
semantics:[
	event(e) evttype(e bake) tense(e past) mode(e ppart)
	participant(p0) objtype(p0 bill)
	participant(p1) reftype(p1 interrogative) animacy(p1 false)
	relation(agent e p0) relation(patient e p1)]
sentence:[what was baked by bill, what baked by bill]


### n0Vn1 - Passive with wh-moved subject and no by-phrase
# what was baked

# remove "what baked"
@morph @strict
what-was-baked
semantics:[
	event(e) evttype(e bake) tense(e past) mode(e ppart)
	participant(p1) reftype(p1 interrogative) animacy(p1 false)
	relation(patient e p1)]
sentence:[what was baked, what baked]


### n0Vn1 - Passive with wh-moved by-phrase
# by whom was the cake baked

@morph @strict
by-whom-was-the-cake-baked
semantics:[
	event(e) evttype(e bake) tense(e past) mode(e ppart)
	participant(p0) reftype(p0 interrogative) animacy(p0 true)
	participant(p1) objtype(p1 cake) reftype(p1 definite)
	relation(agent e p0) relation(patient e p1)]
sentence:[by whom was the cake baked]


### n0Vn1 - Passive with wh-moved object out of the by-phrase
# whom was the cake baked by
# who was the cake baked by

### n0Vn1 - Object relative clause with overt extracted wh-NP
# the cake whose cherries Bill likes
# the cake which Bill baked

### n0Vn1 - Object relative clause with covert extracted wh-NP
# the cake that Bill bakes

### n0Vn1 - Subject relative clause with overt extracted wh-NP
# the man who ate the cake

### n0Vn1 - Subject relative clause with covert extracted wh-NP
# the man that ate the cake

### n0Vn1 - Adjunct (gap-less) relative clause with covert extracted wh-NP
# the day Bill ate the cake

### n0Vn1 - Adjunct (gap-less) relative clause with covert extracted wh-NP with passive with by-phrase
# the day the cake was baked by Bill

### n0Vn1 - Adjunct (gap-less) relative clause with covert extracted wh-NP with passive without byphrase
# the day the cake was baked

### n0Vn1 - Adjunct (gap-less) relative clause with PP pied-piping
# the house in which Bill baked a cake

### n0Vn1 - Adjunct (gap-less) relative clause with PP pied-piping with passive with by-phrase
# the house in which the tree was planted by Bill

### n0Vn1 - Adjunct (gap-less) relative clause with PP pied-piping with passive without by-phrase
# the house in which the tree was planted

### n0Vn1 - Passive with relative clause on subject and no by-phrase with overt extracted wh-NP
# the cake whose cherries were eaten

### n0Vn1 - Passive with relative clause on subject and no by-phrase with covert extracted wh-NP
# the cake that was eaten

### n0Vn1 - Passive with relative clause on subject and by-phrase with overt extracted wh-NP
# the cake whose cherries were eaten by Bill

### n0Vn1 - Passive with relative clause on subject and by-phrase with covert extracted wh-NP
# the cake that was eaten by Bill

### n0Vn1 - Passive with relative clause on object on the by-phrase with overt extracted wh-NP
# the man who the tree was planted by

### n0Vn1 - Passive with relative clause on object on the by-phrase with covert extracted wh-NP
# the man that the tree was planted by

### n0Vn1 - Passive with relative clause on object on the by phrase with with PP pied-piping
# the man by whom the cake was baked
# Lisa likes [the man by whom the tree was planted]
# [the man by whom the tree was planted] likes Lisa

### n0Vn1 - Determiner gerund
# Lisa approves of [his baking of the cake]

### n0Vn1 - NP gerund
# Bill approved of [Lisa baking a cake]

### n0Vn1 - PRO subject
# Bill wants [PRO to bake a cake]

### n0Vn1 - NP gerund with PRO subject
# Bill approved of [PRO baking a cake]

### n0Vn1 - Gerund passive with by-phrase with PRO subject
# Lisa likes [PRO being loved by Bill]

### n0Vn1 - Gerund passive without by-phrase with PRO subject
# Lisa likes [PRO being loved]

### n0Vn1 - Passive with by-phrase with PRO subject
# Bill wants [PRO to be loved by Lisa]

### n0Vn1 - Passive without by-phrase with PRO subject
# Bill wants [PRO to be loved]

### n0Vn1 - Gerund passive with by-phrase
# Bill being loved by Lisa

### n0Vn1 - Gerund passive without by-phrase
# Bill being loved

### n0Vn1 - Pre-nominal participial modifier
# the baked cake

### n0Vn1 - Derived adjective
# totally baked



### ... #####################################################################
# these should go into n0Vn1 once n0V is done 

# these tests were slow because of strange adjunction on std leaf np causing "dog chase cat a a a a a"
# I added mark=nadj on red node of RelativeCovertPPTop but "the day bill sleeps" now fails...

# REDO all these tests

# error: a dog chased a cat, missing auxiliary? the mode is still ind|ppart
@ignore @morph @strict
a-dog-chase-a-cat
semantics:[
	event(e) evttype(e chase) mode(e ind|ppart)
	participant(p0) objtype(p0 dog) reftype(p0 indefinite)
	participant(p1) objtype(p1 cat) reftype(p1 indefinite)
	relation(agent e p0) relation(patient e p1)]
sentence:[a cat chased by a dog, a dog chases a cat, a dog chased a cat, a cat chased by a dog]


# unfortunately it also produces "a dog be chase a cat" because there is no failed adjunction
# we could probably handle the auxiliary with a pattern rather than with a dedicated literal
# the mode ppart does not prevent to select the (p0 e p1) tree! hence "a dog is chased a cat"... 
# I changed the passive voice, I have to redo it
@ignore @morph @strict
a-cat-chase-by-a-dog
semantics:[
	event(e) evttype(e chase) voice(e passive) mode(e ppart)
	participant(p0) objtype(p0 dog) reftype(p0 indefinite)
	participant(p1) objtype(p1 cat) reftype(p1 indefinite)
    relation(agent e p0) relation(patient e p1)]
sentence:[a cat is chased by a dog, a dog is chased a cat]


# this gives crazy things like "dog cat who a sleep a chase by who", we'll see that later
@ignore @loose
a-cat-chase-by-a-dog-sleep
semantics:[
	event(e0) evttype(e0 chase) mode(e0 ppart)
	event(e1) evttype(e1 sleep)
	participant(p0) objtype(p0 dog) reftype(p0 indefinite)
	participant(p1) objtype(p1 cat) reftype(p1 indefinite)
	relation(agent e0 p0) relation(patient e0 p1)
	relation(agent e1 p1)]
sentence:[a cat chase by a dog sleep]






