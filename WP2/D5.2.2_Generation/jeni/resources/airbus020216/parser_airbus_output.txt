
Input Grammar File = /home/bikash/git/pjeni/jeni/resources/airbus020216/valuation020216.xml

Input Lexicon File = /home/bikash/git/pjeni/jeni/resources/airbus020216/airbus-lexicon-0116.lex

Input Tests = /home/bikash/git/pjeni/jeni/resources/airbus020216/sentences.txt

Output File = /home/bikash/git/pjeni/jeni/resources/airbus020216/parser_airbus_output.txt







Input Sentence = 
	Pipe-identified-unknown-text-labels
	[Pipe(0), identified(1), unknown(2), text(3), labels(4)]




Trees Selected for identified(1) = 
Tn0Vpn1-2-0 s(np↓ vp(v♢shall v♢be v♦identified ✗pp(prep♢with np↓)))

Trees Selected for labels(4) = 
TalphaNX-1-0 np(n♦labels)

Trees Selected for Pipe(0) = 
TalphaNX-1-0 np(n♦Pipe)





All Possible Tree Combinations : 
Combination 1 : [TalphaNX-1-0 np(n♦labels), TalphaNX-1-0 np(n♦Pipe), Tn0Vpn1-2-0 s(np↓ vp(v♢shall v♢be v♦identified ✗pp(prep♢with np↓)))]
Results from each Combination (Combination# do not tally) : 

Combination 1 : 
np(n♦labels)	np(n♦Pipe)	s(np↓ vp(v♢shall v♢be v♦identified ✗pp(prep♢with np↓)))	
Initial Chart Items : [Item-0 [labels], Item-1 [Pipe], Item-2 [shall be identified with]]
Derivations = 
1. [labels]
	Derivation Tree = (♢ TalphaNX-1-0.labels)
	Remarks = Not all trees combined. Going to be discarded.
2. [Pipe]
	Derivation Tree = (♢ TalphaNX-1-0.Pipe)
	Remarks = Not all trees combined. Going to be discarded.
3. [labels, shall, be, identified, with, Pipe]
	Derivation Tree = (♢ Tn0Vpn1-2-0.shall_be_identified_with (↓ TalphaNX-1-0.labels 0.0) (↓ TalphaNX-1-0.Pipe 0.1.3.1))
	Remarks = OK.
4. [Pipe, shall, be, identified, with, labels]
	Derivation Tree = (♢ Tn0Vpn1-2-0.shall_be_identified_with (↓ TalphaNX-1-0.Pipe 0.0) (↓ TalphaNX-1-0.labels 0.1.3.1))
	Remarks = OK.



Successful Derivations = 

[labels, shall, be, identified, with, Pipe]
Derivation Tree = (♢ Tn0Vpn1-2-0.shall_be_identified_with (↓ TalphaNX-1-0.labels 0.0) (↓ TalphaNX-1-0.Pipe 0.1.3.1))
Semantics = @J0:exists(identifyarg2,@A0) @H0:and(identify,@J0) @V4:label(@V2) @A0:pipe(@D0) @E0:exists(identifyarg1,@H0) @F0:subset(@V4,@E0)
Word Order = [4, 1, 0]
Going to be discarded.



[Pipe, shall, be, identified, with, labels]
Derivation Tree = (♢ Tn0Vpn1-2-0.shall_be_identified_with (↓ TalphaNX-1-0.Pipe 0.0) (↓ TalphaNX-1-0.labels 0.1.3.1))
Semantics = @J0:exists(identifyarg2,@A0) @E0:exists(identifyarg1,@H0) @A0:label(@D0) @H0:and(identify,@J0) @V4:pipe(@V2) @F0:subset(@V4,@E0)
Word Order = [0, 1, 4]





Final Results = 

@J0:exists(identifyarg2,@A0) @E0:exists(identifyarg1,@H0) @A0:label(@D0) @H0:and(identify,@J0) @V4:pipe(@V2) @F0:subset(@V4,@E0)





